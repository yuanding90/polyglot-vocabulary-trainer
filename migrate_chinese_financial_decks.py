#!/usr/bin/env python3
"""
Chinese Financial Vocabulary Migration Script
Migrates 5 merged Chinese financial vocabulary databases to Supabase
Converts traditional Chinese to simplified Chinese
"""

import sqlite3
import json
import os
from pathlib import Path
from supabase import create_client, Client
from dotenv import load_dotenv
import time
from typing import List, Dict, Any
import re

# Load environment variables
load_dotenv()

# Initialize Supabase client
supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
supabase_key = os.getenv('NEXT_PUBLIC_SUPABASE_ANON_KEY')
supabase: Client = create_client(supabase_url, supabase_key)

# Chinese vocabulary database path
CHINESE_VOCAB_PATH = "/Users/ding/Desktop/Coding/Chinese App/vocab database"

# Traditional to Simplified Chinese mapping (common financial terms)
TRADITIONAL_TO_SIMPLIFIED = {
    'Â∏≥ÂñÆ': 'Ë¥¶Âçï',
    'Â∏≥Êà∂': 'Ë¥¶Êà∑',
    'Â∏≥ÁõÆ': 'Ë¥¶ÁõÆ',
    'Â∏≥Âãô': 'Ë¥¶Âä°',
    'Â∏≥Ê¨æ': 'Ë¥¶Ê¨æ',
    'Â∏≥Èù¢': 'Ë¥¶Èù¢',
    'Â∏≥ÂÜä': 'Ë¥¶ÂÜå',
    'Â∏≥Á∞ø': 'Ë¥¶Á∞ø',
    'Â∏≥Ëôü': 'Ë¥¶Âè∑',
    'ÈäÄË°å': 'Èì∂Ë°å',
    'Ë≤∏Ê¨æ': 'Ë¥∑Ê¨æ',
    'ÈÇÑÊ¨æ': 'ËøòÊ¨æ',
    '‰ªòÊ¨æ': '‰ªòÊ¨æ',
    'Êî∂Ê¨æ': 'Êî∂Ê¨æ',
    'ËΩâÂ∏≥': 'ËΩ¨Ë¥¶',
    'ÂåØÊ¨æ': 'Ê±áÊ¨æ',
    'ÂåØÁéá': 'Ê±áÁéá',
    'ÂåØÂÖå': 'Ê±áÂÖë',
    'ÂåØÁ•®': 'Ê±áÁ•®',
    '‰øùÈö™': '‰øùÈô©',
    '‰øùÂñÆ': '‰øùÂçï',
    '‰øùË≤ª': '‰øùË¥π',
    'ÁêÜË≥†': 'ÁêÜËµî',
    'ÊäïË≥á': 'ÊäïËµÑ',
    'ËÇ°Á•®': 'ËÇ°Á•®',
    'ÂÇµÂà∏': 'ÂÄ∫Âà∏',
    'Âü∫Èáë': 'Âü∫Èáë',
    'ÊúüË≤®': 'ÊúüË¥ß',
    'ÊúüÊ¨ä': 'ÊúüÊùÉ',
    'Ë≠âÂà∏': 'ËØÅÂà∏',
    '‰∫§Êòì': '‰∫§Êòì',
    'Â∏ÇÂ†¥': 'Â∏ÇÂú∫',
    'ÂÉπÊ†º': '‰ª∑Ê†º',
    'ÂÉπÂÄº': '‰ª∑ÂÄº',
    'Êî∂Áõä': 'Êî∂Áõä',
    'Âà©ÊΩ§': 'Âà©Ê∂¶',
    'ËôßÊêç': '‰∫èÊçü',
    'È¢®Èö™': 'È£éÈô©',
    'ÁÆ°ÁêÜ': 'ÁÆ°ÁêÜ',
    'ÊúçÂãô': 'ÊúçÂä°',
    'Ê•≠Âãô': '‰∏öÂä°',
    'ÂÖ¨Âè∏': 'ÂÖ¨Âè∏',
    '‰ºÅÊ•≠': '‰ºÅ‰∏ö',
    'Ê©üÊßã': 'Êú∫ÊûÑ',
    'ÈÉ®ÈñÄ': 'ÈÉ®Èó®',
    'ËÅ∑Âì°': 'ËÅåÂëò',
    'ÂÆ¢Êà∂': 'ÂÆ¢Êà∑',
    'ÂêàÂêå': 'ÂêàÂêå',
    'ÂçîË≠∞': 'ÂçèËÆÆ',
    'Ê¢ùÊ¨æ': 'Êù°Ê¨æ',
    'Ê¢ù‰ª∂': 'Êù°‰ª∂',
    'Ë¶èÂÆö': 'ËßÑÂÆö',
    'Ë¶èÂâá': 'ËßÑÂàô',
    'ÊîøÁ≠ñ': 'ÊîøÁ≠ñ',
    'Âà∂Â∫¶': 'Âà∂Â∫¶',
    'Á≥ªÁµ±': 'Á≥ªÁªü',
    'Á®ãÂ∫è': 'Á®ãÂ∫è',
    'ÊµÅÁ®ã': 'ÊµÅÁ®ã',
    'Ê®ôÊ∫ñ': 'Ê†áÂáÜ',
    'Ë¶ÅÊ±Ç': 'Ë¶ÅÊ±Ç',
    'ÂØ©Ê†∏': 'ÂÆ°Ê†∏',
    'ÊâπÂáÜ': 'ÊâπÂáÜ',
    'ÊéàÊ¨ä': 'ÊéàÊùÉ',
    'Á¢∫Ë™ç': 'Á°ÆËÆ§',
    'È©óË≠â': 'È™åËØÅ',
    'Ê™¢Êü•': 'Ê£ÄÊü•',
    'Áõ£Áù£': 'ÁõëÁù£',
    'ÊéßÂà∂': 'ÊéßÂà∂',
    'Áõ£ÁÆ°': 'ÁõëÁÆ°',
    'Â†±Âëä': 'Êä•Âëä',
    'Ë®òÈåÑ': 'ËÆ∞ÂΩï',
    'Ê™îÊ°à': 'Ê°£Ê°à',
    'Ë≥áÊñô': 'ËµÑÊñô',
    '‰ø°ÊÅØ': '‰ø°ÊÅØ',
    'Êï∏Êìö': 'Êï∞ÊçÆ',
    'Áµ±Ë®à': 'ÁªüËÆ°',
    'ÂàÜÊûê': 'ÂàÜÊûê',
    'Á†îÁ©∂': 'Á†îÁ©∂',
    'Ë™øÊü•': 'Ë∞ÉÊü•',
    'Ë©ï‰º∞': 'ËØÑ‰º∞',
    'Ë®àÁÆó': 'ËÆ°ÁÆó',
    'È†êÁÆó': 'È¢ÑÁÆó',
    'Ë®àÂäÉ': 'ËÆ°Âàí',
    'Á≠ñÁï•': 'Á≠ñÁï•',
    'ÁõÆÊ®ô': 'ÁõÆÊ†á',
    'ÁµêÊûú': 'ÁªìÊûú',
    'ÊïàÊûú': 'ÊïàÊûú',
    'ÂΩ±Èüø': 'ÂΩ±Âìç',
    'Èóú‰øÇ': 'ÂÖ≥Á≥ª',
    'ËÅØÁπ´': 'ËÅîÁ≥ª',
    'Ê∫ùÈÄö': 'Ê≤üÈÄö',
    'ÂçîË™ø': 'ÂçèË∞É',
    'Âêà‰Ωú': 'Âêà‰Ωú',
    'ÊîØÊåÅ': 'ÊîØÊåÅ',
    'Âπ´Âä©': 'Â∏ÆÂä©',
    'Âª∫Ë≠∞': 'Âª∫ËÆÆ',
    'ÊÑèË¶ã': 'ÊÑèËßÅ',
    'ÂïèÈ°å': 'ÈóÆÈ¢ò',
    'Âõ∞Èõ£': 'Âõ∞Èöæ',
    'ÊåëÊà∞': 'ÊåëÊàò',
    'Ê©üÊúÉ': 'Êú∫‰ºö',
    'ÂÑ™Âã¢': '‰ºòÂäø',
    'Âä£Âã¢': 'Âä£Âäø',
    'Á´∂Áà≠': 'Á´û‰∫â',
    'ÈúÄÊ±Ç': 'ÈúÄÊ±Ç',
    '‰æõÊáâ': '‰æõÂ∫î',
    'ÊàêÊú¨': 'ÊàêÊú¨',
    'Ë≤ªÁî®': 'Ë¥πÁî®',
    'Êî∂ÂÖ•': 'Êî∂ÂÖ•',
    'ÊîØÂá∫': 'ÊîØÂá∫',
    'Ë≥áÁî¢': 'ËµÑ‰∫ß',
    'Ë≤†ÂÇµ': 'Ë¥üÂÄ∫',
    'Ê¨äÁõä': 'ÊùÉÁõä',
    'Ë≥áÊú¨': 'ËµÑÊú¨',
    'Ë≥áÈáë': 'ËµÑÈáë',
    'ÁèæÈáë': 'Áé∞Èáë',
    'Â≠òÊ¨æ': 'Â≠òÊ¨æ',
    'ÂÑ≤ËìÑ': 'ÂÇ®ËìÑ',
    'Âà©ÊÅØ': 'Âà©ÊÅØ',
    'Âà©Áéá': 'Âà©Áéá'
}

def convert_to_simplified_chinese(text: str) -> str:
    """Convert traditional Chinese characters to simplified Chinese"""
    if not text:
        return text
    
    result = text
    for traditional, simplified in TRADITIONAL_TO_SIMPLIFIED.items():
        result = result.replace(traditional, simplified)
    
    return result

def create_chinese_decks() -> List[Dict[str, Any]]:
    """Create the 5 Chinese financial vocabulary decks"""
    decks = [
        {
            "name": "Chinese Finance 1",
            "description": "Essential Chinese financial vocabulary - Part 1",
            "difficulty_level": "intermediate",
            "language_a_name": "Chinese",
            "language_b_name": "French",
            "language_a_code": "zh",
            "language_b_code": "fr",
            "total_words": 516,
            "is_active": True
        },
        {
            "name": "Chinese Finance 2", 
            "description": "Essential Chinese financial vocabulary - Part 2",
            "difficulty_level": "intermediate",
            "language_a_name": "Chinese",
            "language_b_name": "French", 
            "language_a_code": "zh",
            "language_b_code": "fr",
            "total_words": 516,
            "is_active": True
        },
        {
            "name": "Chinese Finance 3",
            "description": "Essential Chinese financial vocabulary - Part 3", 
            "difficulty_level": "intermediate",
            "language_a_name": "Chinese",
            "language_b_name": "French",
            "language_a_code": "zh", 
            "language_b_code": "fr",
            "total_words": 515,
            "is_active": True
        },
        {
            "name": "Chinese Finance 4",
            "description": "Essential Chinese financial vocabulary - Part 4",
            "difficulty_level": "intermediate", 
            "language_a_name": "Chinese",
            "language_b_name": "French",
            "language_a_code": "zh",
            "language_b_code": "fr",
            "total_words": 515,
            "is_active": True
        },
        {
            "name": "Chinese Finance 5",
            "description": "Essential Chinese financial vocabulary - Part 5",
            "difficulty_level": "intermediate",
            "language_a_name": "Chinese", 
            "language_b_name": "French",
            "language_a_code": "zh",
            "language_b_code": "fr",
            "total_words": 515,
            "is_active": True
        }
    ]
    return decks

def load_vocabulary_from_db(db_path: str) -> List[Dict[str, Any]]:
    """Load vocabulary from SQLite database"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT word_number, chinese_word, french_translation, 
               example_sentence, sentence_translation
        FROM vocabulary
        ORDER BY word_number
    """)
    
    rows = cursor.fetchall()
    conn.close()
    
    vocabulary = []
    for row in rows:
        word_number, chinese_word, french_translation, example_sentence, sentence_translation = row
        
        # Convert traditional Chinese to simplified
        chinese_word_simplified = convert_to_simplified_chinese(chinese_word)
        example_sentence_simplified = convert_to_simplified_chinese(example_sentence)
        
        vocabulary.append({
            "word_number": word_number,
            "language_a_word": chinese_word_simplified,
            "language_b_translation": french_translation,
            "language_a_sentence": example_sentence_simplified,
            "language_b_sentence": sentence_translation
        })
    
    return vocabulary

def insert_deck_to_supabase(deck: Dict[str, Any]) -> str:
    """Insert deck into Supabase and return deck ID"""
    try:
        result = supabase.table('vocabulary_decks').insert(deck).execute()
        deck_id = result.data[0]['id']
        print(f"‚úÖ Created deck: {deck['name']} (ID: {deck_id})")
        return deck_id
    except Exception as e:
        print(f"‚ùå Error creating deck {deck['name']}: {e}")
        raise

def insert_vocabulary_to_supabase(vocabulary: List[Dict[str, Any]]) -> List[str]:
    """Insert vocabulary into Supabase and return vocabulary IDs"""
    vocab_ids = []
    
    # Insert in batches of 100
    batch_size = 100
    for i in range(0, len(vocabulary), batch_size):
        batch = vocabulary[i:i + batch_size]
        
        # Prepare batch data
        batch_data = []
        for item in batch:
            batch_data.append({
                "language_a_word": item["language_a_word"],
                "language_b_translation": item["language_b_translation"],
                "language_a_sentence": item["language_a_sentence"],
                "language_b_sentence": item["language_b_sentence"]
            })
        
        try:
            result = supabase.table('vocabulary').insert(batch_data).execute()
            batch_ids = [item['id'] for item in result.data]
            vocab_ids.extend(batch_ids)
            print(f"‚úÖ Inserted batch {i//batch_size + 1}: {len(batch_ids)} words")
        except Exception as e:
            print(f"‚ùå Error inserting vocabulary batch {i//batch_size + 1}: {e}")
            raise
    
    return vocab_ids

def link_vocabulary_to_deck(deck_id: str, vocabulary_ids: List[str]):
    """Link vocabulary to deck in deck_vocabulary table"""
    deck_vocab_data = []
    for i, vocab_id in enumerate(vocabulary_ids):
        deck_vocab_data.append({
            "deck_id": deck_id,
            "vocabulary_id": vocab_id,
            "word_order": i + 1
        })
    
    # Insert in batches
    batch_size = 100
    for i in range(0, len(deck_vocab_data), batch_size):
        batch = deck_vocab_data[i:i + batch_size]
        
        try:
            supabase.table('deck_vocabulary').insert(batch).execute()
            print(f"‚úÖ Linked batch {i//batch_size + 1}: {len(batch)} words to deck")
        except Exception as e:
            print(f"‚ùå Error linking vocabulary batch {i//batch_size + 1}: {e}")
            raise

def migrate_chinese_decks():
    """Main migration function"""
    print("üöÄ Starting Chinese Financial Vocabulary Migration")
    print("=" * 60)
    
    # Create decks
    decks = create_chinese_decks()
    deck_ids = []
    
    for i, deck in enumerate(decks, 1):
        print(f"\nüìö Processing Deck {i}: {deck['name']}")
        print("-" * 40)
        
        # Create deck in Supabase
        deck_id = insert_deck_to_supabase(deck)
        deck_ids.append(deck_id)
        
        # Load vocabulary from SQLite
        db_path = f"{CHINESE_VOCAB_PATH}/financial_vocab_batch_merged_{i}.db"
        print(f"üìñ Loading vocabulary from: {db_path}")
        
        vocabulary = load_vocabulary_from_db(db_path)
        print(f"üìù Loaded {len(vocabulary)} vocabulary items")
        
        # Show sample of converted text
        if vocabulary:
            sample = vocabulary[0]
            print(f"üîç Sample conversion:")
            print(f"   Chinese: {sample['language_a_word']}")
            print(f"   French: {sample['language_b_translation']}")
            print(f"   Example: {sample['language_a_sentence'][:50]}...")
        
        # Insert vocabulary to Supabase
        print(f"üíæ Inserting vocabulary to Supabase...")
        vocabulary_ids = insert_vocabulary_to_supabase(vocabulary)
        
        # Link vocabulary to deck
        print(f"üîó Linking vocabulary to deck...")
        link_vocabulary_to_deck(deck_id, vocabulary_ids)
        
        print(f"‚úÖ Completed Deck {i}: {deck['name']}")
        
        # Small delay between decks
        if i < len(decks):
            time.sleep(1)
    
    print("\n" + "=" * 60)
    print("üéâ Chinese Financial Vocabulary Migration Complete!")
    print(f"üìä Created {len(deck_ids)} decks with total vocabulary items")
    
    return deck_ids

if __name__ == "__main__":
    try:
        deck_ids = migrate_chinese_decks()
        print(f"\nüéØ Deck IDs created: {deck_ids}")
    except Exception as e:
        print(f"‚ùå Migration failed: {e}")
        raise

